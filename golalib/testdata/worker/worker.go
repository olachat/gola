// Code generated by gola 0.1.1; DO NOT EDIT.

package worker

import (
	"database/sql"
	"encoding/json"
	"reflect"
	"strings"

	"github.com/olachat/gola/v2/coredb"
)

const DBName string = "testdata"
const TableName string = "worker"

// Worker represents `worker` table
type Worker struct {
	//  int(11)
	Id `json:"id"`
	//  varchar(255)
	Name `json:"name"`
	//  int(11)
	Age `json:"age"`
}

type withPK interface {
	GetId() int
}

// FetchByPK returns a row from `worker` table with given primary key value
//
// Deprecated: use the function with context
func FetchByPK(val int) *Worker {
	return coredb.FetchByPK[Worker](DBName, TableName, []string{"id"}, val)
}

// FetchFieldsByPK returns a row with selected fields from worker table with given primary key value
//
// Deprecated: use the function with context
func FetchFieldsByPK[T any](val int) *T {
	return coredb.FetchByPK[T](DBName, TableName, []string{"id"}, val)
}

// FetchByPKs returns rows with from `worker` table with given primary key values
//
// Deprecated: use the function with context
func FetchByPKs(vals ...int) []*Worker {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKs[Worker](DBName, TableName, "id", pks)
}

// FetchFieldsByPKs returns rows with selected fields from `worker` table with given primary key values
//
// Deprecated: use the function with context
func FetchFieldsByPKs[T any](vals ...int) []*T {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKs[T](DBName, TableName, "id", pks)
}

// FindOne returns a row from `worker` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindOne(whereSQL string, params ...any) *Worker {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOne[Worker](DBName, TableName, w)
}

// FindOneFields returns a row with selected fields from `worker` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindOneFields[T any](whereSQL string, params ...any) *T {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOne[T](DBName, TableName, w)
}

// Find returns rows from `worker` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func Find(whereSQL string, params ...any) ([]*Worker, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.Find[Worker](DBName, TableName, w)
}

// FindFields returns rows with selected fields from `worker` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindFields[T any](whereSQL string, params ...any) ([]*T, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.Find[T](DBName, TableName, w)
}

// Count returns select count(*) with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func Count(whereSQL string, params ...any) (int, error) {
	return coredb.QueryInt(DBName, "SELECT COUNT(*) FROM `worker` "+whereSQL, params...)
}

// FetchByPK returns a row from `worker` table with given primary key value
//
// Deprecated: use the function with context
func FetchByPKFromMaster(val int) *Worker {
	return coredb.FetchByPKFromMaster[Worker](DBName, TableName, []string{"id"}, val)
}

// FetchFieldsByPK returns a row with selected fields from worker table with given primary key value
//
// Deprecated: use the function with context
func FetchFieldsByPKFromMaster[T any](val int) *T {
	return coredb.FetchByPKFromMaster[T](DBName, TableName, []string{"id"}, val)
}

// FetchByPKs returns rows with from `worker` table with given primary key values
//
// Deprecated: use the function with context
func FetchByPKsFromMaster(vals ...int) []*Worker {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKsFromMaster[Worker](DBName, TableName, "id", pks)
}

// FetchFieldsByPKs returns rows with selected fields from `worker` table with given primary key values
//
// Deprecated: use the function with context
func FetchFieldsByPKsFromMaster[T any](vals ...int) []*T {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKsFromMaster[T](DBName, TableName, "id", pks)
}

// FindOne returns a row from `worker` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindOneFromMaster(whereSQL string, params ...any) *Worker {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOneFromMaster[Worker](DBName, TableName, w)
}

// FindOneFields returns a row with selected fields from `worker` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindOneFieldsFromMaster[T any](whereSQL string, params ...any) *T {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOneFromMaster[T](DBName, TableName, w)
}

// Find returns rows from `worker` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindFromMaster(whereSQL string, params ...any) ([]*Worker, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindFromMaster[Worker](DBName, TableName, w)
}

// FindFields returns rows with selected fields from `worker` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindFieldsFromMaster[T any](whereSQL string, params ...any) ([]*T, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindFromMaster[T](DBName, TableName, w)
}

// Count returns select count(*) with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func CountFromMaster(whereSQL string, params ...any) (int, error) {
	return coredb.QueryIntFromMaster(DBName, "SELECT COUNT(*) FROM `worker` "+whereSQL, params...)
}

// Column types

// Id field
type Id struct {
	isAssigned bool
	val        int
}

func (c *Id) GetId() int {
	return c.val
}

func (c *Id) GetColumnName() string {
	return "id"
}

func (c *Id) GetValPointer() any {
	return &c.val
}

func (c *Id) getIdForDB() int {
	return c.val
}

func (c *Id) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Id) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Name field
type Name struct {
	_updated bool
	val      string
}

func (c *Name) GetName() string {
	return c.val
}

func (c *Name) SetName(val string) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *Name) IsUpdated() bool {
	return c._updated
}

func (c *Name) resetUpdated() {
	c._updated = false
}

func (c *Name) GetColumnName() string {
	return "name"
}

func (c *Name) GetValPointer() any {
	return &c.val
}

func (c *Name) getNameForDB() string {
	return c.val
}

func (c *Name) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Name) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Age field
type Age struct {
	_updated bool
	val      int
}

func (c *Age) GetAge() int {
	return c.val
}

func (c *Age) SetAge(val int) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *Age) IsUpdated() bool {
	return c._updated
}

func (c *Age) resetUpdated() {
	c._updated = false
}

func (c *Age) GetColumnName() string {
	return "age"
}

func (c *Age) GetValPointer() any {
	return &c.val
}

func (c *Age) getAgeForDB() int {
	return c.val
}

func (c *Age) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Age) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// New return new *Worker with default values
func New() *Worker {
	return &Worker{
		Id{},
		Name{},
		Age{},
	}
}

// NewWithPK takes "id"
// and returns new *Worker with given PK
func NewWithPK(val int) *Worker {
	c := &Worker{
		Id{},
		Name{},
		Age{},
	}
	c.Id.val = val
	c.Id.isAssigned = true
	return c
}

const insertWithoutPK string = "INSERT INTO `worker` (`name`, `age`) values (?, ?)"
const insertWithPK string = "INSERT INTO `worker` (`id`, `name`, `age`) values (?, ?, ?)"

// Insert Worker struct to `worker` table
// Deprecated: use the function with context
func (c *Worker) Insert() error {
	var result sql.Result
	var err error
	if c.Id.isAssigned {
		result, err = coredb.Exec(DBName, insertWithPK, c.getIdForDB(), c.getNameForDB(), c.getAgeForDB())
		if err != nil {
			return err
		}
	} else {
		result, err = coredb.Exec(DBName, insertWithoutPK, c.getNameForDB(), c.getAgeForDB())
		if err != nil {
			return err
		}

		id, err := result.LastInsertId()
		if err != nil {
			return err
		}
		c.Id.val = int(id)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if affectedRows == 0 {
		return coredb.ErrAvoidInsert
	}

	c.resetUpdated()
	return nil
}

func (c *Worker) resetUpdated() {
	c.Name.resetUpdated()
	c.Age.resetUpdated()
}

// Update Worker struct in `worker` table
// Deprecated: use the function with context
func (obj *Worker) Update() (bool, error) {
	var updatedFields []string
	var params []any
	if obj.Name.IsUpdated() {
		updatedFields = append(updatedFields, "`name` = ?")
		params = append(params, obj.getNameForDB())
	}
	if obj.Age.IsUpdated() {
		updatedFields = append(updatedFields, "`age` = ?")
		params = append(params, obj.getAgeForDB())
	}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `worker` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE `id` = ?"
	params = append(params, obj.GetId())

	result, err := coredb.Exec(DBName, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	obj.resetUpdated()
	return true, nil
}

// Update Worker struct with given fields in `worker` table
// Deprecated: use the function with context
func Update(obj withPK) (bool, error) {
	var updatedFields []string
	var params []any
	var resetFuncs []func()

	val := reflect.ValueOf(obj).Elem()
	updatedFields = make([]string, 0, val.NumField())
	params = make([]any, 0, val.NumField())

	for i := 0; i < val.NumField(); i++ {
		col := val.Field(i).Addr().Interface()

		switch c := col.(type) {
		case *Name:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`name` = ?")
				params = append(params, c.getNameForDB())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *Age:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`age` = ?")
				params = append(params, c.getAgeForDB())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		}
	}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `worker` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE `id` = ?"
	params = append(params, obj.GetId())

	result, err := coredb.Exec(DBName, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	for _, f := range resetFuncs {
		f()
	}
	return true, nil
}

const deleteSql string = "DELETE FROM `worker` WHERE `id` = ?"

// DeleteByPK delete a row from worker table with given primary key value
// Deprecated: use the function with context
func DeleteByPK(val int) error {
	_, err := coredb.Exec(DBName, deleteSql, val)
	return err
}
