// Code generated by gola 0.1.1; DO NOT EDIT.

package worker

import (
	"fmt"
	"strings"

	"github.com/olachat/gola/v2/coredb"
)

type orderBy int

type idxQuery[T any] struct {
	whereSql    string
	limitSql    string
	orders      []string
	whereParams []any
}

// order by enum & interface
const (
	IdAsc orderBy = iota
	IdDesc
	NameAsc
	NameDesc
	AgeAsc
	AgeDesc
)

func (q *idxQuery[T]) OrderBy(args ...orderBy) coredb.ReadQuery[T] {
	q.orders = make([]string, len(args))
	for i, arg := range args {
		switch arg {
		case IdAsc:
			q.orders[i] = "`id` asc"
		case IdDesc:
			q.orders[i] = "`id` desc"
		case NameAsc:
			q.orders[i] = "`name` asc"
		case NameDesc:
			q.orders[i] = "`name` desc"
		case AgeAsc:
			q.orders[i] = "`age` asc"
		case AgeDesc:
			q.orders[i] = "`age` desc"
		}
	}
	return q
}

// deprecated: use the function with context
func (q *idxQuery[T]) All() []*T {
	result, _ := coredb.Find[T](DBName, TableName, q)
	return result
}

// deprecated: use the function with context
func (q *idxQuery[T]) Limit(offset, limit int) []*T {
	q.limitSql = fmt.Sprintf(" limit %d, %d", offset, limit)
	result, _ := coredb.Find[T](DBName, TableName, q)
	return result
}

// deprecated: use the function with context
func (q *idxQuery[T]) AllFromMaster() []*T {
	result, _ := coredb.FindFromMaster[T](DBName, TableName, q)
	return result
}

// deprecated: use the function with context
func (q *idxQuery[T]) LimitFromMaster(offset, limit int) []*T {
	q.limitSql = fmt.Sprintf(" limit %d, %d", offset, limit)
	result, _ := coredb.FindFromMaster[T](DBName, TableName, q)
	return result
}

type order[T any] interface {
	OrderBy(args ...orderBy) coredb.ReadQuery[T]
}

type orderReadQuery[T any] interface {
	order[T]
	coredb.ReadQuery[T]
}

type iQuery[T any] interface {
	orderReadQuery[T]
}

// Find methods

// Select returns rows from `worker` table with index awared query
func Select() iQuery[Worker] {
	return new(idxQuery[Worker])
}

// SelectFields returns rows with selected fields from `worker` table with index awared query
func SelectFields[T any]() iQuery[T] {
	return new(idxQuery[T])
}

func (q *idxQuery[T]) GetWhere() (whereSql string, params []any) {
	var orderSql string
	if len(q.orders) > 0 {
		orderSql = " order by " + strings.Join(q.orders, ",")
	}
	return q.whereSql + orderSql + q.limitSql, q.whereParams
}
