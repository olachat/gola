// Code generated by gola 0.1.0; DO NOT EDIT.

package blogs

import (
	"fmt"
	"strings"

	"github.com/olachat/gola/coredb"
)

type orderBy int

type idxQuery[T any] struct {
	whereSql    string
	limitSql    string
	orders      []string
	whereParams []any
}

// order by enum & interface
const (
	IdAsc orderBy = iota
	IdDesc
	UserIdAsc
	UserIdDesc
	SlugAsc
	SlugDesc
	TitleAsc
	TitleDesc
	CategoryIdAsc
	CategoryIdDesc
	IsPinnedAsc
	IsPinnedDesc
	IsVipAsc
	IsVipDesc
	CountryAsc
	CountryDesc
	CreatedAtAsc
	CreatedAtDesc
	UpdatedAtAsc
	UpdatedAtDesc
)

func (q *idxQuery[T]) OrderBy(args ...orderBy) coredb.ReadQuery[T] {
	q.orders = make([]string, len(args))
	for i, arg := range args {
		switch arg {
		case IdAsc:
			q.orders[i] = "`id` asc"
		case IdDesc:
			q.orders[i] = "`id` desc"
		case UserIdAsc:
			q.orders[i] = "`user_id` asc"
		case UserIdDesc:
			q.orders[i] = "`user_id` desc"
		case SlugAsc:
			q.orders[i] = "`slug` asc"
		case SlugDesc:
			q.orders[i] = "`slug` desc"
		case TitleAsc:
			q.orders[i] = "`title` asc"
		case TitleDesc:
			q.orders[i] = "`title` desc"
		case CategoryIdAsc:
			q.orders[i] = "`category_id` asc"
		case CategoryIdDesc:
			q.orders[i] = "`category_id` desc"
		case IsPinnedAsc:
			q.orders[i] = "`is_pinned` asc"
		case IsPinnedDesc:
			q.orders[i] = "`is_pinned` desc"
		case IsVipAsc:
			q.orders[i] = "`is_vip` asc"
		case IsVipDesc:
			q.orders[i] = "`is_vip` desc"
		case CountryAsc:
			q.orders[i] = "`country` asc"
		case CountryDesc:
			q.orders[i] = "`country` desc"
		case CreatedAtAsc:
			q.orders[i] = "`created_at` asc"
		case CreatedAtDesc:
			q.orders[i] = "`created_at` desc"
		case UpdatedAtAsc:
			q.orders[i] = "`updated_at` asc"
		case UpdatedAtDesc:
			q.orders[i] = "`updated_at` desc"
		}
	}
	return q
}

func (q *idxQuery[T]) All() []*T {
	result, _ := coredb.Find[T](DBName, TableName, q)
	return result
}

func (q *idxQuery[T]) Limit(offset, limit int) []*T {
	q.limitSql = fmt.Sprintf(" limit %d, %d", offset, limit)
	result, _ := coredb.Find[T](DBName, TableName, q)
	return result
}

type order[T any] interface {
	OrderBy(args ...orderBy) coredb.ReadQuery[T]
}

type orderReadQuery[T any] interface {
	order[T]
	coredb.ReadQuery[T]
}

type iQuery[T any] interface {
	WhereCategoryIdEQ(val int) iQuery1[T]
	WhereCategoryIdIN(vals ...int) iQuery1[T]
	WhereCountryEQ(val string) iQuery4[T]
	WhereCountryIN(vals ...string) iQuery4[T]
	WhereSlugEQ(val string) orderReadQuery[T]
	WhereSlugIN(vals ...string) orderReadQuery[T]
	WhereUserIdEQ(val int) iQuery9[T]
	WhereUserIdIN(vals ...int) iQuery9[T]
	orderReadQuery[T]
}
type iQuery1[T any] interface {
	AndIsPinnedEQ(val bool) iQuery2[T]
	AndIsPinnedIN(vals ...bool) iQuery2[T]
	orderReadQuery[T]
}

type iQuery2[T any] interface {
	AndIsVipEQ(val bool) orderReadQuery[T]
	AndIsVipIN(vals ...bool) orderReadQuery[T]
	orderReadQuery[T]
}

type iQuery4[T any] interface {
	AndCategoryIdEQ(val int) iQuery5[T]
	AndCategoryIdIN(vals ...int) iQuery5[T]
	AndIsVipEQ(val bool) orderReadQuery[T]
	AndIsVipIN(vals ...bool) orderReadQuery[T]
	orderReadQuery[T]
}

type iQuery5[T any] interface {
	AndIsVipEQ(val bool) orderReadQuery[T]
	AndIsVipIN(vals ...bool) orderReadQuery[T]
	orderReadQuery[T]
}

type iQuery9[T any] interface {
	AndIsPinnedEQ(val bool) iQuery10[T]
	AndIsPinnedIN(vals ...bool) iQuery10[T]
	AndIsVipEQ(val bool) orderReadQuery[T]
	AndIsVipIN(vals ...bool) orderReadQuery[T]
	orderReadQuery[T]
}

type iQuery10[T any] interface {
	AndCategoryIdEQ(val int) orderReadQuery[T]
	AndCategoryIdIN(vals ...int) orderReadQuery[T]
	orderReadQuery[T]
}

type idxQuery1[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery1[T]) AndIsPinnedEQ(val bool) iQuery2[T] {
	q.whereSql += " and `is_pinned` = ?"
	q.whereParams = append(q.whereParams, val)
	return &idxQuery2[T]{q.idxQuery}
}

func (q *idxQuery1[T]) AndIsPinnedIN(vals ...bool) iQuery2[T] {
	q.whereSql += " and `is_pinned` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return &idxQuery2[T]{q.idxQuery}
}

type idxQuery2[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery2[T]) AndIsVipEQ(val bool) orderReadQuery[T] {
	q.whereSql += " and `is_vip` = ?"
	q.whereParams = append(q.whereParams, val)
	return q.idxQuery
}

func (q *idxQuery2[T]) AndIsVipIN(vals ...bool) orderReadQuery[T] {
	q.whereSql += " and `is_vip` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return q.idxQuery
}

type idxQuery4[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery4[T]) AndCategoryIdEQ(val int) iQuery5[T] {
	q.whereSql += " and `category_id` = ?"
	q.whereParams = append(q.whereParams, val)
	return &idxQuery5[T]{q.idxQuery}
}

func (q *idxQuery4[T]) AndCategoryIdIN(vals ...int) iQuery5[T] {
	q.whereSql += " and `category_id` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return &idxQuery5[T]{q.idxQuery}
}

func (q *idxQuery4[T]) AndIsVipEQ(val bool) orderReadQuery[T] {
	q.whereSql += " and `is_vip` = ?"
	q.whereParams = append(q.whereParams, val)
	return q.idxQuery
}

func (q *idxQuery4[T]) AndIsVipIN(vals ...bool) orderReadQuery[T] {
	q.whereSql += " and `is_vip` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return q.idxQuery
}

type idxQuery5[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery5[T]) AndIsVipEQ(val bool) orderReadQuery[T] {
	q.whereSql += " and `is_vip` = ?"
	q.whereParams = append(q.whereParams, val)
	return q.idxQuery
}

func (q *idxQuery5[T]) AndIsVipIN(vals ...bool) orderReadQuery[T] {
	q.whereSql += " and `is_vip` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return q.idxQuery
}

type idxQuery9[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery9[T]) AndIsPinnedEQ(val bool) iQuery10[T] {
	q.whereSql += " and `is_pinned` = ?"
	q.whereParams = append(q.whereParams, val)
	return &idxQuery10[T]{q.idxQuery}
}

func (q *idxQuery9[T]) AndIsPinnedIN(vals ...bool) iQuery10[T] {
	q.whereSql += " and `is_pinned` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return &idxQuery10[T]{q.idxQuery}
}

func (q *idxQuery9[T]) AndIsVipEQ(val bool) orderReadQuery[T] {
	q.whereSql += " and `is_vip` = ?"
	q.whereParams = append(q.whereParams, val)
	return q.idxQuery
}

func (q *idxQuery9[T]) AndIsVipIN(vals ...bool) orderReadQuery[T] {
	q.whereSql += " and `is_vip` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return q.idxQuery
}

type idxQuery10[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery10[T]) AndCategoryIdEQ(val int) orderReadQuery[T] {
	q.whereSql += " and `category_id` = ?"
	q.whereParams = append(q.whereParams, val)
	return q.idxQuery
}

func (q *idxQuery10[T]) AndCategoryIdIN(vals ...int) orderReadQuery[T] {
	q.whereSql += " and `category_id` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return q.idxQuery
}

// Find methods

// Select returns rows from `blogs` table with index awared query
func Select() iQuery[Blog] {
	return new(idxQuery[Blog])
}

// SelectFields returns rows with selected fields from `blogs` table with index awared query
func SelectFields[T any]() iQuery[T] {
	return new(idxQuery[T])
}

func (q *idxQuery[T]) WhereCategoryIdEQ(val int) iQuery1[T] {
	q.whereSql += " where `category_id` = ?"
	q.whereParams = append(q.whereParams, val)
	return &idxQuery1[T]{q}
}

func (q *idxQuery[T]) WhereCategoryIdIN(vals ...int) iQuery1[T] {
	q.whereSql = " where `category_id` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return &idxQuery1[T]{q}
}

func (q *idxQuery[T]) WhereCountryEQ(val string) iQuery4[T] {
	q.whereSql += " where `country` = ?"
	q.whereParams = append(q.whereParams, val)
	return &idxQuery4[T]{q}
}

func (q *idxQuery[T]) WhereCountryIN(vals ...string) iQuery4[T] {
	q.whereSql = " where `country` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return &idxQuery4[T]{q}
}

func (q *idxQuery[T]) WhereSlugEQ(val string) orderReadQuery[T] {
	q.whereSql += " where `slug` = ?"
	q.whereParams = append(q.whereParams, val)
	return q
}

func (q *idxQuery[T]) WhereSlugIN(vals ...string) orderReadQuery[T] {
	q.whereSql = " where `slug` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return q
}

func (q *idxQuery[T]) WhereUserIdEQ(val int) iQuery9[T] {
	q.whereSql += " where `user_id` = ?"
	q.whereParams = append(q.whereParams, val)
	return &idxQuery9[T]{q}
}

func (q *idxQuery[T]) WhereUserIdIN(vals ...int) iQuery9[T] {
	q.whereSql = " where `user_id` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return &idxQuery9[T]{q}
}

func (q *idxQuery[T]) GetWhere() (whereSql string, params []any) {
	var orderSql string
	if len(q.orders) > 0 {
		orderSql = " order by " + strings.Join(q.orders, ",")
	}
	return q.whereSql + orderSql + q.limitSql, q.whereParams
}
