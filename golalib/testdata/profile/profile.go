// Code generated by gola 0.1.1; DO NOT EDIT.

package profile

import (
	"database/sql"
	"encoding/json"
	"reflect"
	"strings"

	"github.com/olachat/gola/coredb"
)

const DBName string = "testdata"
const TableName string = "profile"

// Profile represents `profile` table
type Profile struct {
	//  int(11)
	UserId `json:"user_id"`
	//  tinyint(4)
	Level `json:"level"`
	// Nick Name varchar(255)
	NickName `json:"nick_name"`
}

type withPK interface {
	GetUserId() int
}

// FetchByPK returns a row from `profile` table with given primary key value
func FetchByPK(val int) *Profile {
	return coredb.FetchByPK[Profile](DBName, TableName, []string{"user_id"}, val)
}

// FetchFieldsByPK returns a row with selected fields from profile table with given primary key value
func FetchFieldsByPK[T any](val int) *T {
	return coredb.FetchByPK[T](DBName, TableName, []string{"user_id"}, val)
}

// FetchByPKs returns rows with from `profile` table with given primary key values
func FetchByPKs(vals ...int) []*Profile {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKs[Profile](DBName, TableName, "user_id", pks)
}

// FetchFieldsByPKs returns rows with selected fields from `profile` table with given primary key values
func FetchFieldsByPKs[T any](vals ...int) []*T {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKs[T](DBName, TableName, "user_id", pks)
}

// FindOne returns a row from `profile` table with arbitary where query
// whereSQL must start with "where ..."
func FindOne(whereSQL string, params ...any) *Profile {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOne[Profile](DBName, TableName, w)
}

// FindOneFields returns a row with selected fields from `profile` table with arbitary where query
// whereSQL must start with "where ..."
func FindOneFields[T any](whereSQL string, params ...any) *T {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOne[T](DBName, TableName, w)
}

// Find returns rows from `profile` table with arbitary where query
// whereSQL must start with "where ..."
func Find(whereSQL string, params ...any) ([]*Profile, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.Find[Profile](DBName, TableName, w)
}

// FindFields returns rows with selected fields from `profile` table with arbitary where query
// whereSQL must start with "where ..."
func FindFields[T any](whereSQL string, params ...any) ([]*T, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.Find[T](DBName, TableName, w)
}

// Count returns select count(*) with arbitary where query
// whereSQL must start with "where ..."
func Count(whereSQL string, params ...any) (int, error) {
	return coredb.QueryInt(DBName, "SELECT COUNT(*) FROM `profile` "+whereSQL, params...)
}

// Column types

// UserId field
type UserId struct {
	val int
}

func (c *UserId) GetUserId() int {
	return c.val
}

func (c *UserId) GetColumnName() string {
	return "user_id"
}

func (c *UserId) GetValPointer() any {
	return &c.val
}

func (c *UserId) getUserIdForDB() int {
	return c.val
}

func (c *UserId) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *UserId) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// Level field
type Level struct {
	_updated bool
	val      int8
}

func (c *Level) GetLevel() int8 {
	return c.val
}

func (c *Level) SetLevel(val int8) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *Level) IsUpdated() bool {
	return c._updated
}

func (c *Level) resetUpdated() {
	c._updated = false
}

func (c *Level) GetColumnName() string {
	return "level"
}

func (c *Level) GetValPointer() any {
	return &c.val
}

func (c *Level) getLevelForDB() int8 {
	return c.val
}

func (c *Level) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *Level) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// NickName field
// Nick Name
type NickName struct {
	_updated bool
	val      string
}

func (c *NickName) GetNickName() string {
	return c.val
}

func (c *NickName) SetNickName(val string) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}

func (c *NickName) IsUpdated() bool {
	return c._updated
}

func (c *NickName) resetUpdated() {
	c._updated = false
}

func (c *NickName) GetColumnName() string {
	return "nick_name"
}

func (c *NickName) GetValPointer() any {
	return &c.val
}

func (c *NickName) getNickNameForDB() string {
	return c.val
}

func (c *NickName) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *NickName) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}

// NewWithPK takes "user_id"
// and returns new *Profile with given PK
func NewWithPK(val int) *Profile {
	c := &Profile{
		UserId{},
		Level{val: int8(1)},
		NickName{},
	}
	c.UserId.val = val
	return c
}

const insertWithoutPK string = "INSERT INTO `profile` (`user_id`, `level`, `nick_name`) values (?, ?, ?)"

// Insert Profile struct to `profile` table
func (c *Profile) Insert() error {
	var result sql.Result
	var err error
	result, err = coredb.Exec(DBName, insertWithoutPK, c.getUserIdForDB(), c.getLevelForDB(), c.getNickNameForDB())
	if err != nil {
		return err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if affectedRows == 0 {
		return coredb.ErrAvoidInsert
	}

	c.resetUpdated()
	return nil
}

func (c *Profile) resetUpdated() {
	c.Level.resetUpdated()
	c.NickName.resetUpdated()
}

// Update Profile struct in `profile` table
func (obj *Profile) Update() (bool, error) {
	var updatedFields []string
	var params []any
	if obj.Level.IsUpdated() {
		updatedFields = append(updatedFields, "`level` = ?")
		params = append(params, obj.getLevelForDB())
	}
	if obj.NickName.IsUpdated() {
		updatedFields = append(updatedFields, "`nick_name` = ?")
		params = append(params, obj.getNickNameForDB())
	}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `profile` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE `user_id` = ?"
	params = append(params, obj.GetUserId())

	result, err := coredb.Exec(DBName, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	obj.resetUpdated()
	return true, nil
}

// Update Profile struct with given fields in `profile` table
func Update(obj withPK) (bool, error) {
	var updatedFields []string
	var params []any
	var resetFuncs []func()

	val := reflect.ValueOf(obj).Elem()
	updatedFields = make([]string, 0, val.NumField())
	params = make([]any, 0, val.NumField())

	for i := 0; i < val.NumField(); i++ {
		col := val.Field(i).Addr().Interface()

		switch c := col.(type) {
		case *Level:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`level` = ?")
				params = append(params, c.getLevelForDB())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		case *NickName:
			if c.IsUpdated() {
				updatedFields = append(updatedFields, "`nick_name` = ?")
				params = append(params, c.getNickNameForDB())
				resetFuncs = append(resetFuncs, c.resetUpdated)
			}
		}
	}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `profile` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE `user_id` = ?"
	params = append(params, obj.GetUserId())

	result, err := coredb.Exec(DBName, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	for _, f := range resetFuncs {
		f()
	}
	return true, nil
}

const deleteSql string = "DELETE FROM `profile` WHERE `user_id` = ?"

// DeleteByPK delete a row from profile table with given primary key value
func DeleteByPK(val int) error {
	_, err := coredb.Exec(DBName, deleteSql, val)
	return err
}
