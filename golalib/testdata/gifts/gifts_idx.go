// Code generated by gola 0.1.1; DO NOT EDIT.

package gifts

import (
	"fmt"
	"strings"

	"github.com/olachat/gola/v2/coredb"
)

type orderBy int

type idxQuery[T any] struct {
	whereSql    string
	limitSql    string
	orders      []string
	whereParams []any
}

// order by enum & interface
const (
	IdAsc orderBy = iota
	IdDesc
	NameAsc
	NameDesc
	IsFreeAsc
	IsFreeDesc
	GiftCountAsc
	GiftCountDesc
	GiftTypeAsc
	GiftTypeDesc
	CreateTimeAsc
	CreateTimeDesc
	DiscountAsc
	DiscountDesc
	PriceAsc
	PriceDesc
	RemarkAsc
	RemarkDesc
	ManifestAsc
	ManifestDesc
	DescriptionAsc
	DescriptionDesc
	UpdateTimeAsc
	UpdateTimeDesc
	BranchesAsc
	BranchesDesc
)

func (q *idxQuery[T]) OrderBy(args ...orderBy) coredb.ReadQuery[T] {
	q.orders = make([]string, len(args))
	for i, arg := range args {
		switch arg {
		case IdAsc:
			q.orders[i] = "`id` asc"
		case IdDesc:
			q.orders[i] = "`id` desc"
		case NameAsc:
			q.orders[i] = "`name` asc"
		case NameDesc:
			q.orders[i] = "`name` desc"
		case IsFreeAsc:
			q.orders[i] = "`is_free` asc"
		case IsFreeDesc:
			q.orders[i] = "`is_free` desc"
		case GiftCountAsc:
			q.orders[i] = "`gift_count` asc"
		case GiftCountDesc:
			q.orders[i] = "`gift_count` desc"
		case GiftTypeAsc:
			q.orders[i] = "`gift_type` asc"
		case GiftTypeDesc:
			q.orders[i] = "`gift_type` desc"
		case CreateTimeAsc:
			q.orders[i] = "`create_time` asc"
		case CreateTimeDesc:
			q.orders[i] = "`create_time` desc"
		case DiscountAsc:
			q.orders[i] = "`discount` asc"
		case DiscountDesc:
			q.orders[i] = "`discount` desc"
		case PriceAsc:
			q.orders[i] = "`price` asc"
		case PriceDesc:
			q.orders[i] = "`price` desc"
		case RemarkAsc:
			q.orders[i] = "`remark` asc"
		case RemarkDesc:
			q.orders[i] = "`remark` desc"
		case ManifestAsc:
			q.orders[i] = "`manifest` asc"
		case ManifestDesc:
			q.orders[i] = "`manifest` desc"
		case DescriptionAsc:
			q.orders[i] = "`description` asc"
		case DescriptionDesc:
			q.orders[i] = "`description` desc"
		case UpdateTimeAsc:
			q.orders[i] = "`update_time` asc"
		case UpdateTimeDesc:
			q.orders[i] = "`update_time` desc"
		case BranchesAsc:
			q.orders[i] = "`branches` asc"
		case BranchesDesc:
			q.orders[i] = "`branches` desc"
		}
	}
	return q
}

// deprecated: use the function with context
func (q *idxQuery[T]) All() []*T {
	result, _ := coredb.Find[T](DBName, TableName, q)
	return result
}

// deprecated: use the function with context
func (q *idxQuery[T]) Limit(offset, limit int) []*T {
	q.limitSql = fmt.Sprintf(" limit %d, %d", offset, limit)
	result, _ := coredb.Find[T](DBName, TableName, q)
	return result
}

// deprecated: use the function with context
func (q *idxQuery[T]) AllFromMaster() []*T {
	result, _ := coredb.FindFromMaster[T](DBName, TableName, q)
	return result
}

// deprecated: use the function with context
func (q *idxQuery[T]) LimitFromMaster(offset, limit int) []*T {
	q.limitSql = fmt.Sprintf(" limit %d, %d", offset, limit)
	result, _ := coredb.FindFromMaster[T](DBName, TableName, q)
	return result
}

type order[T any] interface {
	OrderBy(args ...orderBy) coredb.ReadQuery[T]
}

type orderReadQuery[T any] interface {
	order[T]
	coredb.ReadQuery[T]
}

type iQuery[T any] interface {
	WherePriceEQ(val float64) iQuery1[T]
	WherePriceIN(vals ...float64) iQuery1[T]
	orderReadQuery[T]
}
type iQuery1[T any] interface {
	AndRemarkEQ(val string) orderReadQuery[T]
	AndRemarkIN(vals ...string) orderReadQuery[T]
	orderReadQuery[T]
}

type idxQuery1[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery1[T]) AndRemarkEQ(val string) orderReadQuery[T] {
	q.whereSql += " and `remark` = ?"
	q.whereParams = append(q.whereParams, val)
	return q.idxQuery
}

func (q *idxQuery1[T]) AndRemarkIN(vals ...string) orderReadQuery[T] {
	q.whereSql += " and `remark` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return q.idxQuery
}

// Find methods

// Select returns rows from `gifts` table with index awared query
func Select() iQuery[Gift] {
	return new(idxQuery[Gift])
}

// SelectFields returns rows with selected fields from `gifts` table with index awared query
func SelectFields[T any]() iQuery[T] {
	return new(idxQuery[T])
}

func (q *idxQuery[T]) WherePriceEQ(val float64) iQuery1[T] {
	q.whereSql += " where `price` = ?"
	q.whereParams = append(q.whereParams, val)
	return &idxQuery1[T]{q}
}

func (q *idxQuery[T]) WherePriceIN(vals ...float64) iQuery1[T] {
	q.whereSql = " where `price` in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	return &idxQuery1[T]{q}
}

func (q *idxQuery[T]) GetWhere() (whereSql string, params []any) {
	var orderSql string
	if len(q.orders) > 0 {
		orderSql = " order by " + strings.Join(q.orders, ",")
	}
	return q.whereSql + orderSql + q.limitSql, q.whereParams
}
