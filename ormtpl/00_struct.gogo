// Code generated by gola {{.GetVersion}}; DO NOT EDIT.

package {{.Package}}
{{$table := .}}
import (
	"database/sql"
	"encoding/json"
	"reflect"
	"strings"

	"github.com/olachat/gola/v2/coredb"

	{{.Imports}}
)

const DBName string = "{{.SchemaName}}"
const TableName string = "{{.Name}}"

// {{.ClassName}} represents `{{.Name}}` table
type {{.ClassName}} struct {
	{{- range .Columns }}
	// {{.Comment}} {{.FullDBType}}
	{{.GoTypeName}} `json:"{{.Name}}"`
	{{- end }}
}

{{- if .HasCompositePrimaryKey }}
type PK struct {
	{{- range .GetPKColumns }}
	{{.GoTypeName}} {{.GoType}}
	{{- end }}
}
{{- end}}

type withPK interface {
	{{- range .GetPKColumns }}
	Get{{.GoName}}() {{.GoType}}
	{{- end }}
}

// FetchByPK returns a row from `{{.Name}}` table with given primary key value
//
// Deprecated: use the function with context
func FetchByPK(val {{.GetPrimaryKeyType}}) *{{.ClassName}} {
	return coredb.FetchByPK[{{.ClassName}}](DBName, TableName, []string{ {{.GetPrimaryKeyNames}} }, {{.GetPrimaryKeyVals}})
}
// FetchFieldsByPK returns a row with selected fields from {{.Name}} table with given primary key value
//
// Deprecated: use the function with context
func FetchFieldsByPK[T any](val {{.GetPrimaryKeyType}}) *T {
	return coredb.FetchByPK[T](DBName, TableName, []string{ {{.GetPrimaryKeyNames}} }, {{.GetPrimaryKeyVals}})
}
{{- if not .HasCompositePrimaryKey }}
// FetchByPKs returns rows with from `{{.Name}}` table with given primary key values
//
// Deprecated: use the function with context
func FetchByPKs(vals ...{{.GetPrimaryKeyType}}) []*{{.ClassName}} {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKs[{{.ClassName}}](DBName, TableName, "{{.GetPrimaryKeyName}}", pks)
}

// FetchFieldsByPKs returns rows with selected fields from `{{.Name}}` table with given primary key values
//
// Deprecated: use the function with context
func FetchFieldsByPKs[T any](vals ...{{.GetPrimaryKeyType}}) []*T {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKs[T](DBName, TableName, "{{.GetPrimaryKeyName}}", pks)
}
{{- end}}

// FindOne returns a row from `{{.Name}}` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindOne(whereSQL string, params ...any) *{{.ClassName}} {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOne[{{.ClassName}}](DBName, TableName, w)
}

// FindOneFields returns a row with selected fields from `{{.Name}}` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindOneFields[T any](whereSQL string, params ...any) *T {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOne[T](DBName, TableName, w)
}

// Find returns rows from `{{.Name}}` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func Find(whereSQL string, params ...any) ([]*{{.ClassName}}, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.Find[{{.ClassName}}](DBName, TableName, w)
}

// FindFields returns rows with selected fields from `{{.Name}}` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindFields[T any](whereSQL string, params ...any) ([]*T, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.Find[T](DBName, TableName, w)
}

// Count returns select count(*) with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func Count(whereSQL string, params ...any) (int, error) {
	return coredb.QueryInt(DBName, "SELECT COUNT(*) FROM `{{.Name}}` " + whereSQL, params...)
}

// FetchByPK returns a row from `{{.Name}}` table with given primary key value
//
// Deprecated: use the function with context
func FetchByPKFromMaster(val {{.GetPrimaryKeyType}}) *{{.ClassName}} {
	return coredb.FetchByPKFromMaster[{{.ClassName}}](DBName, TableName, []string{ {{.GetPrimaryKeyNames}} }, {{.GetPrimaryKeyVals}})
}
// FetchFieldsByPK returns a row with selected fields from {{.Name}} table with given primary key value
//
// Deprecated: use the function with context
func FetchFieldsByPKFromMaster[T any](val {{.GetPrimaryKeyType}}) *T {
	return coredb.FetchByPKFromMaster[T](DBName, TableName, []string{ {{.GetPrimaryKeyNames}} }, {{.GetPrimaryKeyVals}})
}
{{- if not .HasCompositePrimaryKey }}
// FetchByPKs returns rows with from `{{.Name}}` table with given primary key values
//
// Deprecated: use the function with context
func FetchByPKsFromMaster(vals ...{{.GetPrimaryKeyType}}) []*{{.ClassName}} {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKsFromMaster[{{.ClassName}}](DBName, TableName, "{{.GetPrimaryKeyName}}", pks)
}

// FetchFieldsByPKs returns rows with selected fields from `{{.Name}}` table with given primary key values
//
// Deprecated: use the function with context
func FetchFieldsByPKsFromMaster[T any](vals ...{{.GetPrimaryKeyType}}) []*T {
	pks := coredb.GetAnySlice(vals)
	return coredb.FetchByPKsFromMaster[T](DBName, TableName, "{{.GetPrimaryKeyName}}", pks)
}
{{- end}}

// FindOne returns a row from `{{.Name}}` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindOneFromMaster(whereSQL string, params ...any) *{{.ClassName}} {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOneFromMaster[{{.ClassName}}](DBName, TableName, w)
}

// FindOneFields returns a row with selected fields from `{{.Name}}` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindOneFieldsFromMaster[T any](whereSQL string, params ...any) *T {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindOneFromMaster[T](DBName, TableName, w)
}

// Find returns rows from `{{.Name}}` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindFromMaster(whereSQL string, params ...any) ([]*{{.ClassName}}, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindFromMaster[{{.ClassName}}](DBName, TableName, w)
}

// FindFields returns rows with selected fields from `{{.Name}}` table with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func FindFieldsFromMaster[T any](whereSQL string, params ...any) ([]*T, error) {
	w := coredb.NewWhere(whereSQL, params...)
	return coredb.FindFromMaster[T](DBName, TableName, w)
}

// Count returns select count(*) with arbitary where query
// whereSQL must start with "where ..."
//
// Deprecated: use the function with context
func CountFromMaster(whereSQL string, params ...any) (int, error) {
	return coredb.QueryIntFromMaster(DBName, "SELECT COUNT(*) FROM `{{.Name}}` " + whereSQL, params...)
}

// Column types

{{- range .Columns }}
	{{- if .IsEnum}}
type {{$table.ClassName}}{{.GoName}} string
const (
	{{.GetEnumConst}}
)
	{{- end }}
	{{- if .IsSet}}
type {{$table.ClassName}}{{.GoName}} string
const (
	{{.GetSetConst}}
)
var {{$table.ClassName}}{{.GoName}}List = []string{
	{{.GetSetConstList}}
}
	{{- end }}
{{- end }}

{{- range .Columns }}

// {{.GoTypeName}} field
// {{.Comment}}
{{- if .IsSet}}
    {{- if .IsNullable}}
type {{.GoTypeName}} struct {
	_updated bool
	val goption.Option[string]
}
func (c *{{.GoTypeName}}) Get{{.GoName}}() {{.GoSetNullableType}} {
	if !c.val.Ok() {
		return goption.None[[]{{.GoSetEnumType}}]()
	}
	strSlice := strings.Split(c.val.Unwrap(), ",")
	if len(strSlice) == 1 && !coredb.ValueInSet({{$table.ClassName}}{{.GoName}}List, strSlice[0]) {
		return goption.Some([]{{.GoSetEnumType}}{})
	}
	valSlice := make([]{{.GoSetEnumType}}, 0, len(strSlice))
	for _, s := range strSlice {
		valSlice = append(valSlice, {{.GoSetEnumType}}(strings.ToLower(s)))
	}
	return goption.Some(valSlice)
}

func (c *{{.GoTypeName}}) Set{{.GoName}}(val {{.GoSetNullableType}}) bool {
	if !val.Ok(){
		c.val = goption.None[string]()
	}
	strSlice := make([]string, 0, len(val.Unwrap()))
	for _, v := range val.Unwrap() {
		strSlice = append(strSlice, string(v))
	}
	c.val = goption.Some(strings.Join(strSlice, ","))
	c._updated = true
	return true
}

    {{- else}}
type {{.GoTypeName}} struct {
	_updated bool
	val string
}
func (c *{{.GoTypeName}}) Get{{.GoName}}() []{{.GoSetEnumType}} {
	strSlice := strings.Split(c.val, ",")
	if len(strSlice) == 1 && !coredb.ValueInSet({{$table.ClassName}}{{.GoName}}List, strSlice[0]) {
		return []{{.GoSetEnumType}}{}
	}
	valSlice := make([]{{.GoSetEnumType}}, 0, len(strSlice))
	for _, s := range strSlice {
		valSlice = append(valSlice, {{.GoSetEnumType}}(strings.ToLower(s)))
	}
	return valSlice
}

func (c *{{.GoTypeName}}) Set{{.GoName}}(val []{{.GoSetEnumType}}) bool {
	strSlice := make([]string, 0, len(val))
	for _, v := range val {
		strSlice = append(strSlice, string(v))
	}
	c.val = strings.Join(strSlice, ",")
	c._updated = true
	return true
}
    {{- end}}

{{else}}
type {{.GoTypeName}} struct {
{{- if .IsPrimaryKey}}
	{{- if $table.IsPKAutoGenerated }}
	isAssigned bool
	{{- end }}
{{- else }}
	_updated bool
{{- end}}
	val {{.ValType}}
}

func (c *{{.GoTypeName}}) Get{{.GoName}}() {{.GoType}} {
	{{- if .IsNullableBool}}
	if !c.val.Ok() {
		return goption.None[bool]()
	}
	return goption.Some[bool](c.val.Unwrap() > 0)
	{{- else }}
	return c.val
	{{- end}}
}
{{ if not .IsPrimaryKey}}
func (c *{{.GoTypeName}}) Set{{.GoName}}(val {{.GoType}}) bool {
	{{- if and (ne .GoType "[]byte") (ne .GoType "goption.Option[[]byte]") (not .IsNullableBool)}}
	if c.val == val {
		return false
	}
	{{- else if .IsNullableBool}}
	if !val.Ok() && !c.val.Ok() {
		return false
	}
	if val.Ok() && c.val.Ok() {
		if c.val.Unwrap() == 0 && !val.Unwrap() {
			return false
		}
		if c.val.Unwrap() == 1 && val.Unwrap() {
			return false
		}
	}
	{{- end }}
	c._updated = true
	{{- if .IsNullableBool}}
		if !val.Ok() {
			c.val = goption.None[int]()
		}
		if val.Unwrap() {
			c.val = goption.Some(1)
		} else {
			c.val = goption.Some(0)
		}
	{{- else}}
	c.val = val
	{{- end}}
	return true
}
	{{- end}}
{{end}}

	{{- if not .IsPrimaryKey}}
func (c *{{.GoTypeName}}) IsUpdated() bool {
	return c._updated
}

func (c *{{.GoTypeName}}) resetUpdated()  {
	c._updated = false
}
	{{- end}}

func (c *{{.GoTypeName}}) GetColumnName() string {
	return "{{.Name}}"
}

func (c *{{.GoTypeName}}) GetValPointer() any {
	return &c.val
}

func (c *{{.GoTypeName}}) get{{.GoName}}ForDB() {{.ValType}} {
	return c.val
}

func (c *{{.GoTypeName}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(&c.val)
}

func (c *{{.GoTypeName}}) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &c.val); err != nil {
		return err
	}

	return nil
}
{{- end }}

{{ if .IsPKAutoGenerated }}
// New return new *{{.ClassName}} with default values
func New() *{{.ClassName}} {
	return &{{.ClassName}}{
	{{- range .Columns }}
	{{- if .HasDefault}}
	{{.GoTypeName}}{val:{{.GoDefaultValue}}},
	{{- else}}
	{{.GoTypeName}}{},
	{{- end }}
	{{- end }}
	}
}
{{- end }}

// NewWithPK takes {{.GetPrimaryKeyNames}}
// and returns new *{{.ClassName}} with given PK
func NewWithPK(val {{.GetPrimaryKeyType}}) *{{.ClassName}} {
	c := &{{.ClassName}}{
	{{- range .Columns }}
	{{- if .HasDefault}}
	{{.GoTypeName}}{val:{{.GoDefaultValue}}},
	{{- else}}
	{{.GoTypeName}}{},
	{{- end }}
	{{- end }}
	}

	{{- if .HasCompositePrimaryKey }}
	{{- range $i, $c := .GetPKColumns }}
	c.{{ $c.GoTypeName }}.val = val.{{ $c.GoTypeName }}
	{{- end }}
	{{- else }}
	c.{{.GetPrimaryKey}}.val = val

	{{- if .IsPKAutoGenerated }}
	c.{{.GetPrimaryKey}}.isAssigned = true
	{{- end}}

	{{- end}}
	return c
}

const insertWithoutPK string = "INSERT INTO `{{.Name}}` (`
		{{- range $i, $c := .GetNonAutoIncrementColumns }}
		{{- if $i}}`, `{{end}}
		{{- $c.Name}}
		{{- end }}`) values (
		{{- range $i, $c := .GetNonAutoIncrementColumns }}
		{{- if $i}}, {{end}}?
		{{- end }})"

{{- if .IsPKAutoGenerated }}
const insertWithPK string = "INSERT INTO `{{.Name}}` (`
		{{- range $i, $c := .Columns }}
		{{- if $i}}`, `{{end}}
		{{- $c.Name}}
		{{- end }}`) values (
		{{- range $i, $c := .Columns }}
		{{- if $i}}, {{end}}?
		{{- end }})"
{{- end}}

// Insert {{.ClassName}} struct to `{{.Name}}` table
// Deprecated: use the function with context
func (c *{{.ClassName}}) Insert() error {
	var result sql.Result
	var err error

	{{- if .IsPKAutoGenerated }}
	if c.{{.GetPrimaryKey}}.isAssigned {
		result, err = coredb.Exec(DBName, insertWithPK, {{- range $i, $c := .Columns }}
		{{- if $i}}, {{end}}c.get{{$c.GoName}}ForDB()
		{{- end }})
		if err != nil {
			return err
		}
	} else {
		result, err = coredb.Exec(DBName, insertWithoutPK, {{- range $i, $c := .GetNonAutoIncrementColumns }}
		{{- if $i}}, {{end}}c.get{{$c.GoName}}ForDB()
		{{- end }})
		if err != nil {
			return err
		}

		id, err := result.LastInsertId()
		if err != nil {
			return err
		}
		c.{{.GetPrimaryKey}}.val = {{.GetPrimaryKeyType}}(id)
	}
	{{else}}
	result, err = coredb.Exec(DBName, insertWithoutPK, {{- range $i, $c := .GetNonAutoIncrementColumns }}
		{{- if $i}}, {{end}}c.get{{$c.GoName}}ForDB()
		{{- end }})
	if err != nil {
		return err
	}
	{{- end}}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if affectedRows == 0 {
		return coredb.ErrAvoidInsert
	}

	c.resetUpdated()
	return nil
}

func (c *{{.ClassName}}) resetUpdated() {
	{{- range .GetNonPKColumns }}
	c.{{.GoTypeName}}.resetUpdated()
	{{- end }}
}

// Update {{.ClassName}} struct in `{{.Name}}` table
// Deprecated: use the function with context
func (obj *{{.ClassName}}) Update() (bool, error) {
	var updatedFields []string
	var params []any

	{{- range $i, $c := .GetNonPKColumns }}
	if obj.{{ $c.GoTypeName }}.IsUpdated() {
		updatedFields = append(updatedFields, "`{{ $c.Name }}` = ?")
		params = append(params, obj.get{{$c.GoName}}ForDB())
	}
	{{- end }}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `{{.Name}}` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE {{.GetPrimaryKeySQL}}"
	params = append(params, {{.GetPrimaryKeyParams}})

	result, err := coredb.Exec(DBName, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	obj.resetUpdated()
	return true, nil
}

// Update {{.ClassName}} struct with given fields in `{{.Name}}` table
// Deprecated: use the function with context
func Update(obj withPK) (bool, error) {
	var updatedFields []string
	var params []any
	var resetFuncs []func()

	val := reflect.ValueOf(obj).Elem()
	updatedFields = make([]string, 0, val.NumField())
	params = make([]any, 0, val.NumField())

	for i := 0; i < val.NumField(); i++ {
		col := val.Field(i).Addr().Interface()

		switch c := col.(type) {
		{{- range $i, $c := .GetNonPKColumns }}
		case *{{.GoTypeName}}:
		if c.IsUpdated() {
			updatedFields = append(updatedFields, "`{{ $c.Name }}` = ?")
			params = append(params, c.get{{$c.GoName}}ForDB())
			resetFuncs = append(resetFuncs, c.resetUpdated)
		}
		{{- end }}
		}
	}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `{{.Name}}` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE {{.GetPrimaryKeySQL}}"
	params = append(params, {{.GetPrimaryKeyParams}})

	result, err := coredb.Exec(DBName, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	for _, f := range resetFuncs {
		f()
	}
	return true, nil
}


const deleteSql string = "DELETE FROM `{{.Name}}` WHERE {{.GetPrimaryKeySQL}}"
// DeleteByPK delete a row from {{.Name}} table with given primary key value
// Deprecated: use the function with context
func DeleteByPK(val {{.GetPrimaryKeyType}}) (error) {
	_, err := coredb.Exec(DBName, deleteSql, {{.GetPrimaryKeyVals}})
	return err
}
