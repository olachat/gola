// Code generated by gola {{.GetVersion}}; DO NOT EDIT.

package {{.Package}}
{{$table := .}}
import (
	"context"
	"database/sql"
	"reflect"
	"strings"

	"github.com/olachat/gola/v2/coredb/txengine"
	"github.com/olachat/gola/v2/coredb"
)

// InsertTx inserts {{.ClassName}} struct to `{{.Name}}` table with transaction
func (c *{{.ClassName}}) InsertTx(ctx context.Context, tx *sql.Tx) error {
	var result sql.Result
	var err error

	{{- if .IsPKAutoGenerated }}
	if c.{{.GetPrimaryKey}}.isAssigned {
		result, err = txengine.WithTx(tx).Exec(ctx, insertWithPK, {{- range $i, $c := .Columns }}
		{{- if $i}}, {{end}}c.get{{$c.GoName}}ForDB()
		{{- end }})
		if err != nil {
			return err
		}
	} else {
		result, err = txengine.WithTx(tx).Exec(ctx, insertWithoutPK, {{- range $i, $c := .GetNonAutoIncrementColumns }}
		{{- if $i}}, {{end}}c.get{{$c.GoName}}ForDB()
		{{- end }})
		if err != nil {
			return err
		}

		id, err := result.LastInsertId()
		if err != nil {
			return err
		}
		c.{{.GetPrimaryKey}}.val = {{.GetPrimaryKeyType}}(id)
	}
	{{else}}
	result, err = txengine.WithTx(tx).Exec(ctx, insertWithoutPK, {{- range $i, $c := .GetNonAutoIncrementColumns }}
		{{- if $i}}, {{end}}c.get{{$c.GoName}}ForDB()
		{{- end }})
	if err != nil {
		return err
	}
	{{- end}}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if affectedRows == 0 {
		return coredb.ErrAvoidInsert
	}

	c.resetUpdated()
	return nil
}

// UpdateTx updates {{.ClassName}} struct in `{{.Name}}` table with transaction
func (obj *{{.ClassName}}) UpdateTx(ctx context.Context, tx *sql.Tx) (bool, error) {
	var updatedFields []string
	var params []any

	{{- range $i, $c := .GetNonPKColumns }}
	if obj.{{ $c.GoTypeName }}.IsUpdated() {
		updatedFields = append(updatedFields, "`{{ $c.Name }}` = ?")
		params = append(params, obj.get{{$c.GoName}}ForDB())
	}
	{{- end }}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `{{.Name}}` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE {{.GetPrimaryKeySQL}}"
	params = append(params, {{.GetPrimaryKeyParams}})

	result, err := txengine.WithTx(tx).Exec(ctx, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	obj.resetUpdated()
	return true, nil
}

// UpdateTx updates {{.ClassName}} struct with given fields in `{{.Name}}` table with transaction
func UpdateTx(ctx context.Context, tx *sql.Tx, obj withPK) (bool, error) {
	var updatedFields []string
	var params []any
	var resetFuncs []func()

	val := reflect.ValueOf(obj).Elem()
	updatedFields = make([]string, 0, val.NumField())
	params = make([]any, 0, val.NumField())

	for i := 0; i < val.NumField(); i++ {
		col := val.Field(i).Addr().Interface()

		switch c := col.(type) {
		{{- range $i, $c := .GetNonPKColumns }}
		case *{{.GoTypeName}}:
		if c.IsUpdated() {
			updatedFields = append(updatedFields, "`{{ $c.Name }}` = ?")
			params = append(params, c.get{{$c.GoName}}ForDB())
			resetFuncs = append(resetFuncs, c.resetUpdated)
		}
		{{- end }}
		}
	}

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql := "UPDATE `{{.Name}}` SET "
	sql = sql + strings.Join(updatedFields, ",") + " WHERE {{.GetPrimaryKeySQL}}"
	params = append(params, {{.GetPrimaryKeyParams}})

	result, err := txengine.WithTx(tx).Exec(ctx, sql, params...)
	if err != nil {
		return false, err
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return false, err
	}
	if affectedRows == 0 {
		return false, coredb.ErrAvoidUpdate
	}

	for _, f := range resetFuncs {
		f()
	}
	return true, nil
}
