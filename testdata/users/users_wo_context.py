// Code generated by gola 0.0.1; DO NOT EDIT.

package users

import (
	"github.com/olachat/gola/corelib"
)

// User represents users table
type User struct {
	//  int
	Id
	// Name varchar(255)
	Name
	// Email address varchar(255)
	Email
	// Created Timestamp int unsigned
	CreatedAt
	// Updated Timestamp int unsigned
	UpdatedAt
}

type UserTable struct{}

func (*UserTable) GetTableName() string {
	return "users"
}

var table *UserTable

// Fetch methods
func FetchUserById(id int) *User {
	return corelib.FetchById[User](id)
}

func FetchById[T any, PT corelib.PointerType[T]](id int) *T {
	return corelib.FetchById[T](id)
}

func FetchUserByIds(ids []int) []*User {
	return corelib.FetchByIds[User](ids)
}

func FetchByIds[T any, PT corelib.PointerType[T]](ids []int) []*T {
	return corelib.FetchByIds[T](ids)
}

// Column types
// Id field
//
type Id struct {
	val int
}

func (c *Id) GetId() int {
	return c.val
}

func (c *Id) SetId(val int) {
	c.val = val
}

func (c *Id) GetColumnName() string {
	return "id"
}

func (c *Id) IsPrimaryKey() bool {
	return true
}

func (c *Id) GetValPointer() interface{} {
	return &c.val
}

func (c *Id) GetTableType() corelib.TableType {
	return table
}

// Name field
// Name
type Name struct {
	val string
}

func (c *Name) GetName() string {
	return c.val
}

func (c *Name) SetName(val string) {
	c.val = val
}

func (c *Name) GetColumnName() string {
	return "name"
}

func (c *Name) IsPrimaryKey() bool {
	return false
}

func (c *Name) GetValPointer() interface{} {
	return &c.val
}

func (c *Name) GetTableType() corelib.TableType {
	return table
}

// Email field
// Email address
type Email struct {
	val string
}

func (c *Email) GetEmail() string {
	return c.val
}

func (c *Email) SetEmail(val string) {
	c.val = val
}

func (c *Email) GetColumnName() string {
	return "email"
}

func (c *Email) IsPrimaryKey() bool {
	return false
}

func (c *Email) GetValPointer() interface{} {
	return &c.val
}

func (c *Email) GetTableType() corelib.TableType {
	return table
}

// CreatedAt field
// Created Timestamp
type CreatedAt struct {
	val uint
}

func (c *CreatedAt) GetCreatedAt() uint {
	return c.val
}

func (c *CreatedAt) SetCreatedAt(val uint) {
	c.val = val
}

func (c *CreatedAt) GetColumnName() string {
	return "created_at"
}

func (c *CreatedAt) IsPrimaryKey() bool {
	return false
}

func (c *CreatedAt) GetValPointer() interface{} {
	return &c.val
}

func (c *CreatedAt) GetTableType() corelib.TableType {
	return table
}

// UpdatedAt field
// Updated Timestamp
type UpdatedAt struct {
	val uint
}

func (c *UpdatedAt) GetUpdatedAt() uint {
	return c.val
}

func (c *UpdatedAt) SetUpdatedAt(val uint) {
	c.val = val
}

func (c *UpdatedAt) GetColumnName() string {
	return "updated_at"
}

func (c *UpdatedAt) IsPrimaryKey() bool {
	return false
}

func (c *UpdatedAt) GetValPointer() interface{} {
	return &c.val
}

func (c *UpdatedAt) GetTableType() corelib.TableType {
	return table
}

func NewUser() *User {
	return &User{
		Id{},
		Name{val: ""},
		Email{val: ""},
		CreatedAt{val: uint(0)},
		UpdatedAt{val: uint(0)},
	}
}
